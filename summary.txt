1. Why did you choose the tools, libraries, and language you used for the coding exercise?

I picked Python because it's easy to read and write, which helps speed up development. It also has great libraries for handling APIs and JSON, making it a solid fit for this challenge.

For the API framework, I went with Flask. It's lightweight, quick to set up, and perfect for small to medium-sized projects like this one. Plus, it's easy to test using tools like `pytest`, which I used in my tester file.

Python and Flask work seamlessly together, and offer a simple and efficient solution. 

2. What are the advantages and disadvantages of your solution?

**Advantages:**
- The solution is simple and easy to maintain.
- Flask is fast and lightweight, making it ideal for smaller projects.
- The API covers all the necessary features: adding points, spending them, and checking the balance.
- The code is modular and easy to extend if needed.
- In-memory storage makes it fast and great for testing purposes.


**Disadvantages:**
- Using in-memory storage means data is lost when the server restarts. In production, a persistent database like PostgreSQL or MySQL would be needed, and I would probably opt for PostgreSQL for its additional features like advanced indexing, better concurrency handling, and support for complex queries.
- Flask works well for small projects, but larger or more complex apps might benefit from something more robust like Django, which I also have experience with. 
- The app doesn't support handling multiple requests at the same time, so under heavy traffic, it might struggle. In production, I would use load balancing, async processing, or more scalable infrastructure to fix this.

3. What has been a favorite school/personal project thus far? What about it that challenged you?

One of my favorite projects was building a movie recommendation system using Django, React, and scikit-learn. It allowed users to rate movies, and the system would suggest similar films based on those ratings. It also utilized JWT authentication, and PostgreSQL for the database. 

One thing that challenged me was integrating different technologies together and getting it all hosted for free. Staying organized was key to managing the different components—like the React frontend, Django backend, and PostgreSQL database—while ensuring smooth interaction between them. I also had to carefully optimize the deployment process, using platforms like Heroku and Vercel to host the app without incurring costs. Balancing functionality with the limitations of free hosting options was a valuable learning experience.